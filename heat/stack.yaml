---
heat_template_version: 2015-10-15
description: "Kubernetes Lab"

parameters:

  prefix:
    label: "Prefix"
    description: "Prefix"
    type: string
    default: "lab"

  worker_node_count:
    label: "Worker Node Count"
    description: "Worker Node Count"
    type: number
    default: 3

  lab_repo:
    label: "Lab Repo"
    description: "Lab Repo"
    type: string
    default: "lab-kubernetes"

  lab_repo_version:
    label: "Lab Repo Version"
    description: "Lab Repo Version"
    type: string
    default: "master"

resources:

  password:
    type: OS::Heat::RandomString
    properties:
      length: 8
      sequence: lettersdigits

  keypair:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name:
        str_replace:
          template: "%prefix%-keypair"
          params:
            "%prefix%": { get_param: prefix }

  server_master_node:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%prefix%-master"
          params:
            "%prefix%": { get_param: prefix }
      flavor: "2 GB Performance"
      image: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
      admin_pass: { get_resource: password }
      key_name: { get_resource: keypair }
      networks:
        - { uuid: 00000000-0000-0000-0000-000000000000 }
        - { uuid: 11111111-1111-1111-1111-111111111111 }

  server_worker_nodes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: worker_node_count }
      resource_def:
        type: OS::Nova::Server
        properties:
          name:
            str_replace:
              template: "%prefix%-worker-%index%"
              params:
                "%prefix%": { get_param: prefix }
          flavor: "1 GB Performance"
          image: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
          admin_pass: { get_resource: password }
          key_name: { get_resource: keypair }
          networks:
            - { uuid: 00000000-0000-0000-0000-000000000000 }
            - { uuid: 11111111-1111-1111-1111-111111111111 }

  swift_signal_handle:
    type: OS::Heat::SwiftSignalHandle

  swift_signal:
    type: OS::Heat::SwiftSignal
    properties:
      handle: { get_resource: swift_signal_handle }
      count: 1
      timeout: 14400

  cloud_config_ansible:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        bootcmd:
          - sleep 60
        packages:
          - tmux
          - multitail
          - git
          - gcc
          - make
          - libssl-dev
          - libffi-dev
          - python-dev
          - python-virtualenv
        write_files:
          - path: "/opt/cloud-training/id_rsa"
            permissions: "0600"
            content: { get_attr: [keypair, private_key] }
          - path: "/opt/cloud-training/runcmd-bash"
            permissions: "0700"
            content:
              str_replace:
                template: |
                  #!/bin/bash
                  export HOME="/root"
                  set -e
                  set -x
                  function exit_failure {
                    %swift_signal_notify% --data-binary '{"status": "FAILURE", "reason": "'"$@"'"}'
                    exit 1
                  }
                  function exit_success {
                    %swift_signal_notify% --data-binary '{"status": "SUCCESS"}'
                  }
                  git clone https://github.com/cloud-training/%lab_repo%.git /opt/cloud-training/%lab_repo% || exit_failure "Git Clone"
                  cd /opt/cloud-training/%lab_repo%
                  git checkout %lab_repo_version% || exit_failure "Git Checkout - %lab_repo_version%"
                  git status
                  exit_success
                params:
                  "%swift_signal_notify%": { get_attr: [swift_signal_handle, curl_cli] }
                  "%lab_repo%": { get_param: lab_repo }
                  "%lab_repo_version%": { get_param: lab_repo_version }
        runcmd:
          - tmux new-session -s runcmd -n runcmd-bash -d
          - tmux new-window -n runcmd-bash-logs
          - tmux select-window -t runcmd-bash-logs
          - tmux send-keys "touch /opt/cloud-training/runcmd-bash.err /opt/cloud-training/runcmd-bash.log" C-m
          - tmux send-keys "multitail /opt/cloud-training/runcmd-bash.err /opt/cloud-training/runcmd-bash.log" C-m
          - tmux select-window -t runcmd-bash
          - tmux send-keys "/opt/cloud-training/runcmd-bash >> /opt/cloud-training/runcmd-bash.log 2>> /opt/cloud-training/runcmd-bash.err" C-m
          - tmux select-window -t runcmd-bash-logs

  server_ansible:
    depends_on:
      - server_master_node
      - server_worker_nodes
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%prefix%-ansible"
          params:
            "%prefix%": { get_param: prefix }
      flavor: "512MB Standard Instance"
      image: "Ubuntu 16.04 LTS (Xenial Xerus) (PVHVM)"
      admin_pass: { get_resource: password }
      key_name: { get_resource: keypair }
      networks:
        - { uuid: 00000000-0000-0000-0000-000000000000 }
        - { uuid: 11111111-1111-1111-1111-111111111111 }
      config_drive: True
      user_data_format: RAW
      user_data: { get_resource: cloud_config_ansible }

outputs:

  password:
    description: "Password"
    value: { get_resource: password }

  private_key:
    description: "Private Key"
    value: { get_attr: [keypair, private_key] }

  ansible_ip_address:
    description: "Ansible IP Address"
    value: { get_attr: [server_ansible, accessIPv4] }

  master_node_ip_address:
    description: "Master Node IP Address"
    value: { get_attr: [server_master_node, accessIPv4] }

  worker_nodes_ip_address:
    description: "Worker Nodes IP Address"
    value: { get_attr: [server_worker_nodes, accessIPv4] }
